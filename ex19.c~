/*I learned C before I learned Object Oriented Program, so It helped me to build an oop system in C. In this exercise, we will build a simple object system , but also learn more about the C Pre-Processor or cpp.
The exercise will build a simple game where you kill a minotaur in a small castle. Nothing fancy, just four rooms, and a band guy. This project will also be a multi-file project , and look more like a real C software project than previous ones. This is why I am introducing the CPP here because you need it to start using multiple files in your own software.*/
/*The C pre-processor is a template processing system.  It is a highly targeted one that helps make C easier to work with, but it does this by having sysntax aware templating mechanism. Traditionally people just used the CPP to store constants and make "macros" to simplify reprtitive coding. In modern C you will actually use the CPP as a code generator to create templated pieces of code.*/
/*How the CPP works is you give it one file, uually a .c file, and it processes various bits of text starting with "#" (octothorpe) character. When it encounters one of these it performs a specific replacement on the text of input file. It's main advantage though is it can include other files, and  then augment its list of macros based on that files contents. A quick way to see what CPP does is take the last exercise and run this: "cpp ex18.c | less"*/
/*It will be a huge amount of output, but scroll ,through it and you will see the contents of the other files you included with "#include". Scroll down to the original code and you can see how the "cpp" is altering the source based on various "#define" macros in the hearder files.The C complier is so tightly integrated with CPP that it just runs this for you and understands how it works intimately. In modern C, the cpp system is so integral to C's function that you might as well just consider it to be part of the language.*/
/*The prototype object system.- The oop system we will create is a simple prototype style object system more like JavaScript. Instead of classes, you start with prototpes that will have field set, and then use those as the basisis of creating other object instances. this class less design is much easier to implement and work with a tradition class based one*/
/*now creating "object.h" file */
